# -*- coding: utf-8 -*-
"""Cardiac.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dXSKofF0klPwH8steWSZ-CisUlREJH6H
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msn
import pickle

df=pd.read_csv("cardio_train.csv",sep=";")
df.head()

df.shape

df.drop(axis=1,columns=["id"],inplace=True)

df.info()

df.describe()

df.isnull().any()

df[(df<0)==True].any()

msn.matrix(df,figsize=(25,15))

# Trying to see for the outliers

sns.boxplot(x=df["age"])

sns.boxplot(x=df["height"])

sns.boxplot(x=df["weight"])

sns.boxplot(x=df["ap_hi"])

sns.boxplot(x=df["ap_lo"])

##Since we have got a lot of outliers we need to deal with it

from scipy import stats
z=np.abs(stats.zscore(df))

threshold=3
print(np.where(z>2))

df=df[(z<2).all(axis=1)]

len(df)

#Lets check out for the outliers

sns.boxplot(x=df["age"])

sns.boxplot(x=df["height"])

sns.boxplot(x=df["weight"])

sns.boxplot(x=df["ap_hi"])

sns.boxplot(x=df["ap_lo"])

#lets eliminate the negetive's of ap_hi and ap_lo

df[df["ap_hi"]<0]

df=df.drop([4607,16021,20536,23988,35040])

df[df["ap_hi"]<0]

df[df["ap_lo"]<0]

df=df.drop([60106])

df[df["ap_lo"]<0]

#Lets now try and scale the dataset

from sklearn.preprocessing import StandardScaler
std=StandardScaler()

y=df.iloc[:,-1:].values

df=df.drop(["cardio"],axis=1)

df

df=std.fit_transform(df)

#Now see the columns which are important

df=pd.DataFrame(df)

df.corr()

plt.subplots(figsize=(20,15))
sns.heatmap(df.corr(),annot=True,vmin=-1,vmax=1,center=0,cmap="coolwarm",square=True)

#Now droping the column of cholesterol

df=df.drop([6],axis=1)

#Now lets check the output variable Distribution

import plotly.graph_objs as go
import plotly.offline as py

Y=pd.DataFrame(y)

Y[0].value_counts()

#Quite distributed.... nice

#Now lets go for training..... and before that train test split

x=df.iloc[:,:].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#Now applying Classification Algorithm


"""# ANN"""

x_train.shape

from keras.models import Sequential
from keras.layers import Dense,Activation
model=Sequential()
model.add(Dense(12,input_dim=10,activation="relu"))
model.add(Dense(8,activation="relu"))
model.add(Dense(8,activation="relu"))
model.add(Dense(5,activation="relu"))
model.add(Dense(2,activation="relu"))
model.add(Dense(1,activation="sigmoid"))

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])
model.fit(x_train,y_train,epochs=20)

model.evaluate(x_train,y_train)

model.evaluate(x_test,y_test)

pred=model.predict(x_test)>0.3

pred=pred.round()

metrics.confusion_matrix(y_test,pred)

metrics.recall_score(y_test,pred)

# Saving model to disk
pickle.dump(regressor, open('cardiak.pkl','wb'))
